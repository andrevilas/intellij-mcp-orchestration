#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DIST_DIR="$ROOT_DIR/dist"
FRONTEND_OUTPUT="$DIST_DIR/frontend"
BACKEND_OUTPUT="$DIST_DIR/backend"
METADATA_FILE="$DIST_DIR/README.md"
BUILD_TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

log() {
  echo "[build-local] $1"
}

log "Starting build (pid $$)"

log "Preparing distribution directories"
rm -rf "$DIST_DIR"
mkdir -p "$FRONTEND_OUTPUT" "$BACKEND_OUTPUT"

log "Building frontend bundle"
( 
  cd "$ROOT_DIR/app"
  if [ ! -d node_modules ]; then
    log "Installing frontend dependencies via pnpm"
    pnpm install --frozen-lockfile >/dev/null 2>&1 || pnpm install
  else
    log "Reusing existing frontend dependencies"
  fi
  ./node_modules/.bin/tsc --project tsconfig.json
  ./node_modules/.bin/vite build
)
if command -v rsync >/dev/null 2>&1; then
  rsync -a --delete "$ROOT_DIR/app/dist/" "$FRONTEND_OUTPUT/web/"
else
  rm -rf "$FRONTEND_OUTPUT/web"
  mkdir -p "$FRONTEND_OUTPUT/web"
  cp -R "$ROOT_DIR/app/dist/." "$FRONTEND_OUTPUT/web/"
fi

log "Building backend wheel"
PYTHON_BIN=${PYTHON:-python3}
"$PYTHON_BIN" -m pip install --upgrade pip wheel >/dev/null
"$PYTHON_BIN" -m pip wheel --no-deps --wheel-dir "$BACKEND_OUTPUT" "$ROOT_DIR/server"

log "Capturing metadata"
cat > "$METADATA_FILE" <<MD
# Promenade Agent Hub — Local Build Artifacts

This directory is generated by `scripts/build-local.sh` and contains the
packaged assets for a local/offline installation.

- `frontend/web/` — Static bundle produced by Vite (`./node_modules/.bin/vite build`).
- `backend/` — Python wheels generated from `server/` (`python -m pip wheel --no-deps`).

To install locally:

```bash
# Frontend (serve with any static server)
python3 -m http.server --directory frontend/web 4173
# Backend
python3 -m pip install backend/console_mcp_server-*.whl
```

Generated at: $BUILD_TS
MD

log "Done. Artifacts available in $DIST_DIR"
